<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Ramblings on lessons</title>
		<link>https://geekgunda.github.io/posts/</link>
		<description>Recent content in Posts on Ramblings on lessons</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 11 Oct 2020 10:59:38 -0400</lastBuildDate>
		<atom:link href="https://geekgunda.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Immigrating to Canada</title>
			<link>https://geekgunda.github.io/posts/immigrating-to-canada/</link>
			<pubDate>Sun, 11 Oct 2020 10:59:38 -0400</pubDate>
			
			<guid>https://geekgunda.github.io/posts/immigrating-to-canada/</guid>
			<description>This year, my wife and I moved to Canada as permanent residents. I&amp;rsquo;ve decided to note down my experience and lessons.
Here&amp;rsquo;s a tentative timeline and the steps that got us here. Please note that the timelines are from a pre-pandemic 2019 world!
  Identifying the best suited immigration plan
IRCC tool: Come to Canada tool
In this tool, some specific information is needed:
 Language proficiency test scores Canadian equivalent educational qualifications  Steps on how to get these details are explained below.</description>
			<content type="html"><![CDATA[<p>This year, my wife and I moved to Canada as <a href="https://en.wikipedia.org/wiki/Permanent_residency_in_Canada">permanent residents</a>.
I&rsquo;ve decided to note down my experience and lessons.</p>
<p>Here&rsquo;s a tentative timeline and the steps that got us here. Please note that the timelines are from a pre-pandemic 2019 world!</p>
<ol>
<li>
<p>Identifying the best suited immigration plan</p>
<p>IRCC tool: <a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/come-canada-tool.html">Come to Canada tool</a><br>
In this tool, some specific information is needed:</p>
<ul>
<li>Language proficiency test scores</li>
<li>Canadian equivalent educational qualifications</li>
</ul>
<p>Steps on how to get these details are explained below.</p>
<p>Canada offers multiple pathways to immigrate. Depending upon your education, work stream, age, years of work experience and other factors, you might be eligible for one or more such plans.<br>
In our case, we were eligible for <a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry.html">Express Entry</a>
via <a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/eligibility/federal-skilled-workers.html">Federal Skilled Workers program</a>.</p>
</li>
<li>
<p>Preparing documents for Express Entry application</p>
<p>List of documents by IRCC: <a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/documents.html">Documents for Express Entry</a></p>
<p>Following documents were mandatory. Ideally you can prepare all three in parallel.</p>
<ul>
<li>
<p><a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/documents/education-assessed.html">ECA - Educational Credential Assessment</a></p>
<p>Agency used: <a href="https://www.wes.org/ca/about-wes-credential-evaluation/">WES - World Education Services</a><br>
Processing time: ~ 2 to 3 months</p>
<p>The educational degrees from outside Canada needs to be evaluated to get the equivalent Canadian education.
The time taken also depends on how long your college or university takes to send originals to WES.</p>
</li>
<li>
<p><a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/documents/language-requirements.html">Language Proficiency Test</a></p>
<p>Test used: <a href="http://www.ielts.org/">IELTS</a><br>
Processing time: ~ 1 week</p>
<p>Canada has two official languages: English and French. A separate test is needed to evaluate your language proficiency (in one or both languages).
For English, IELTS used to run a test every 2-4 weeks at various test centers.</p>
</li>
<li>
<p>Passport</p>
<p>Agency: Passport Seva Kendra (India) - <a href="https://portal1.passportindia.gov.in/AppOnlineProject/welcomeLink#">Portal1</a> or
<a href="https://portal2.passportindia.gov.in/AppOnlineProject/welcomeLink#">Portal2</a><br>
Processing time: ~ 1 month</p>
<p>We decided to renew our passports to avoid getting stuck in a foreign country with an expired passport.
An additional requirement for us was to get spouse name added to our respective passports.</p>
</li>
</ul>
</li>
<li>
<p>Express Entry Application</p>
<p>Portal: <a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/submit-profile.html">Express Entry profile</a><br>
Processing time: ~ 1 month</p>
<p>With all these documents in place, we created our Express entry profiles on IRCC website.
Following details were required to fill the application. Apart from these, other major heads were personal details, contact details and language proficiency.</p>
<ul>
<li>
<p>Education history</p>
<p>List of all educational degrees undertaken along with the institution details.
We had to use the ECA report we acquired earlier to fill the Canadian equivalency for each degree.</p>
</li>
<li>
<p>Work history</p>
<p>List of all the job titles held along with company name, start and end date for each role.
We also needed to find out <a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/eligibility/find-national-occupation-code.html">NOC - National Occupational
Classification</a>
code for each role.</p>
</li>
</ul>
<p>We created two express entry profiles, one with my wife as the primary applicant and other with me as the primary applicant.
We ended up submitting both the profiles to the express entry pool. There was no fee up until this point.
As the criteria and priority for <a href="https://www.immigration.ca/fast-track-high-demand-occupations">professions in high demand</a> keeps changing, either of the profiles could get shortlisted.</p>
</li>
<li>
<p>Permanent Residency Application</p>
<p>After we received our ITA (Invitation to Apply for Permanent Residency), next step was to complete our Permanent Residency application.
Apart from the specific details listed below, application also needed passport, photo, marriage certificate and educational degrees per applicant.</p>
<ul>
<li>
<p>Address history</p>
<p>List of all home addresses where the primary applicant has resided in past 5 - 10 years. We had to fill in the exact move-in and move out dates per address.</p>
</li>
<li>
<p>Travel history</p>
<p>List of all the international travel undertaken by the primary applicant. We also needed dates and names of cities visited, per trip.</p>
</li>
<li>
<p>Employment records</p>
<p>For each role listed under work history per applicant, we had to get an official letter from the corresponding organization verifying the tenure, role and responsibilities.
Payslips for compensation received over the duration of each role was also required. All these documents needed to be signed and sealed by the respective organization.</p>
</li>
<li>
<p><a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/apply-permanent-residence/police-certificates.html">Police Clearance Certificate</a></p>
<p>Processing time: ~ 1 week</p>
<p>A proof of criminal history (or a lack thereof). In India, we got this via Passport Seva Kendra (PSK) too.</p>
<p>BEWARE: Processing times can vary widely!</p>
</li>
<li>
<p><a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/documents/medical-exams.html">Medical exam</a></p>
<p>Processing time: ~ 1 month</p>
<p>An upfront medical check up was required for each applicant. We only had to submit the reference details of the checkup in application.
Final report was directly submitted to IRCC by the hospital. We used this portal to <a href="https://secure.cic.gc.ca/pp-md/pp-list.aspx">find a panel physician</a>.</p>
<p>BEWARE: The expiry of your medical report will determine the expiry of your final travel documents!</p>
</li>
<li>
<p><a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/documents/proof-funds.html">Proof of funds</a></p>
<p>Depending upon number of applicants, we had to show sufficient funds availablity for immigrating to Canada.<br>
We needed following documents from our bank for this:</p>
<ul>
<li>Last 6 months bank statement</li>
<li>Balance confirmation letter</li>
<li>Fixed Deposit statement</li>
<li>Credit Card statement</li>
</ul>
<p>All of these had to be signed and sealed by the bank. We drew the statements as close to the date of submitting the application, as possible.
Also note, these funds and statements should not be coming from market linked instruments like stocks, mutual funds etc.</p>
</li>
</ul>
<p>Last, but not least, we needed to pay the
<a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/apply-permanent-residence/fees.html">application fee for Express Entry</a>.
Upon successful submission, we received AoR (Acknowledgement of Receipt).</p>
<p>Once our medical exam reports reached IRCC, we received
a <a href="https://www.canada.ca/en/immigration-refugees-citizenship/campaigns/biometrics.html">Biometric Instruction Letter</a>.<br>
We had to visit a collection point for enrolling our photo and fingerprints.<br>
Processing time: ~ 1 week</p>
<p>After this, we had to wait to hear back from IRCC. Sometimes, they ask for additional documents or proofs. In our case, no such request was made.
IRCC portal&rsquo;s application status page kept us informed of tentative timelines to expect.<br>
Processing time: ~ 3 months</p>
<p>Next, we received a request for submitting our passports for stamping (Ready for Visa letter).<br>
In our case, we had to submit our passports at <a href="http://www.vfsglobal.ca/canada/india">VFS Global</a>.
Finally the visa was stamped into our passport and returned back.<br>
We also received a <a href="https://www.canada.ca/en/immigration-refugees-citizenship/services/immigrate-canada/express-entry/application-approved.html">Confirmation of Permanent Residence - CoPR</a><br>
Processing time: ~ 1 month</p>
</li>
</ol>
<p>And that was it!</p>
]]></content>
		</item>
		
		<item>
			<title>Using MySQL JSON data type with Go</title>
			<link>https://geekgunda.github.io/posts/mysql-json-data-with-go/</link>
			<pubDate>Sat, 19 Sep 2020 15:35:14 -0400</pubDate>
			
			<guid>https://geekgunda.github.io/posts/mysql-json-data-with-go/</guid>
			<description>tl;dr:
 Use json-encoded []byte to write to a JSON column in MySQL
Use json.RawMessage to read a JSON column from MySQL
  Recently, I was trying to use MySQL 8.0&amp;rsquo;s JSON data type within a Go project.
After a long, unsatisfactory search, multiple trial and errors, I found a working solution.
So I thought I&amp;rsquo;d document it here for future reference.
Bringing up a MySQL server A simple docker-compose file to setup mysql server:</description>
			<content type="html"><![CDATA[<p><strong>tl;dr:</strong></p>
<blockquote>
<p>Use <em>json-encoded</em> <code>[]byte</code> to <strong>write</strong> to a JSON column in MySQL<br>
Use <code>json.RawMessage</code> to <strong>read</strong> a JSON column from MySQL</p>
</blockquote>
<hr>
<p>Recently, I was trying to use <a href="https://dev.mysql.com/doc/refman/8.0/en/json.html">MySQL 8.0&rsquo;s JSON data type</a> within a Go project.<br>
After a long, unsatisfactory search, multiple trial and errors, I found a working solution.<br>
So I thought I&rsquo;d document it here for future reference.</p>
<h4 id="bringing-up-a-mysql-server">Bringing up a MySQL server</h4>
<p>A simple docker-compose file to setup mysql server:</p>
<p>File: <code>docker-compose.yml</code></p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3&#39;</span><span class="w"> 
</span><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">db</span><span class="p">:</span><span class="w"> 
</span><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mysql:8.0</span><span class="w">
</span><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span>--<span class="l">default-authentication-plugin=mysql_native_password</span><span class="w">
</span><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">somerandomkeyword</span><span class="w">
</span><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="m">3306</span><span class="p">:</span><span class="m">3306</span><span class="w">
</span></code></pre></div><p>Command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">docker-compose up -d
</code></pre></div><h4 id="setup-mysql-db-and-schema">Setup MySQL DB and schema</h4>
<p>The following snippet creates a database and a table having one of the columns with JSON data type:</p>
<p>File: <code>db.sql</code></p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">DROP</span> <span class="k">DATABASE</span> <span class="k">IF</span> <span class="k">EXISTS</span> <span class="n">scoringdb</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">scoringdb</span><span class="p">;</span>

<span class="n">USE</span> <span class="n">scoringdb</span><span class="p">;</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="k">IF</span> <span class="k">EXISTS</span> <span class="n">gamestats</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">gamestats</span><span class="o">`</span><span class="p">(</span>
    <span class="o">`</span><span class="n">stat_id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
    <span class="o">`</span><span class="n">player</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="o">`</span><span class="n">yards</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="o">`</span><span class="n">longest</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="o">`</span><span class="n">touchdowns</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
    <span class="o">`</span><span class="n">misc</span><span class="o">`</span> <span class="n">JSON</span><span class="p">,</span>
    <span class="k">INDEX</span> <span class="o">`</span><span class="n">idx_player</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">player</span><span class="o">`</span><span class="p">),</span>
    <span class="k">INDEX</span> <span class="o">`</span><span class="n">idx_yards</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">yards</span><span class="o">`</span><span class="p">),</span>
    <span class="k">INDEX</span> <span class="o">`</span><span class="n">idx_longest</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">longest</span><span class="o">`</span><span class="p">),</span>
    <span class="k">INDEX</span> <span class="o">`</span><span class="n">idx_touchdowns</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">touchdowns</span><span class="o">`</span><span class="p">)</span>
<span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">utf8</span><span class="p">;</span>

<span class="n">FLUSH</span> <span class="n">TABLES</span><span class="p">;</span>
</code></pre></div><p>Command:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mysql -uroot -psomerandomkeyword -h 127.0.0.1 &lt; db.sql
</code></pre></div><p>A schema like this can be useful when there is a huge chunk of metadata, but only a few fields need indexing.</p>
<h4 id="writing-to-a-json-column">Writing to a JSON column</h4>
<p>A sample gaming stats struct for reference:<br>
The <code>interface{}</code> fields are raw input, received from a dump file and the corresponding <code>int</code> fields are parsed values for them.</p>
<p>File: <code>contract.go</code></p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Stat</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Player</span>             <span class="kt">string</span>      <span class="s">`json:&#34;Player&#34;`</span>
    <span class="nx">Team</span>               <span class="kt">string</span>      <span class="s">`json:&#34;Team&#34;`</span>
    <span class="nx">Position</span>           <span class="kt">string</span>      <span class="s">`json:&#34;Pos&#34;`</span>
    <span class="nx">Attempts</span>           <span class="kt">int</span>         <span class="s">`json:&#34;Att&#34;`</span>
    <span class="nx">AttemptsPerGameAvg</span> <span class="kt">float64</span>     <span class="s">`json:&#34;Att/G&#34;`</span>
    <span class="nx">Yards</span>              <span class="kd">interface</span><span class="p">{}</span> <span class="s">`json:&#34;Yds&#34;`</span>
    <span class="nx">YardsParsed</span>        <span class="kt">int</span>         <span class="s">`json:&#34;-&#34;`</span>
    <span class="nx">AvgYardsPerAttempt</span> <span class="kt">float64</span>     <span class="s">`json:&#34;Yds/G&#34;`</span>
    <span class="nx">Touchdowns</span>         <span class="kt">int</span>         <span class="s">`json:&#34;TD&#34;`</span>
    <span class="nx">Longest</span>            <span class="kd">interface</span><span class="p">{}</span> <span class="s">`json:&#34;Lng&#34;`</span>
    <span class="nx">LongestParsed</span>      <span class="kt">int</span>         <span class="s">`json:&#34;-&#34;`</span>
    <span class="nx">LongestIsTouchdown</span> <span class="kt">bool</span>        <span class="s">`json:&#34;-&#34;`</span>
    <span class="nx">FirstDown</span>          <span class="kt">int</span>         <span class="s">`json:&#34;1st&#34;`</span>
    <span class="nx">PerFirstDown</span>       <span class="kt">float64</span>     <span class="s">`json:&#34;1st%&#34;`</span>
    <span class="nx">Yards20</span>            <span class="kt">int</span>         <span class="s">`json:&#34;20+&#34;`</span>
    <span class="nx">Yards40</span>            <span class="kt">int</span>         <span class="s">`json:&#34;40+&#34;`</span>
    <span class="nx">Fumbles</span>            <span class="kt">int</span>         <span class="s">`json:&#34;FUM&#34;`</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Stats</span> <span class="p">[]</span><span class="nx">Stat</span>
</code></pre></div><p>To write above struct into the table schema we defined earlier,</p>
<ul>
<li>standard fields get written as is,</li>
<li>for the JSON column, a json-encoded <code>[]byte</code> is needed.</li>
</ul>
<p>File: <code>model.go</code></p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">InsertGameStats</span><span class="p">(</span><span class="nx">s</span> <span class="nx">Stat</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="nx">js</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">err</span> 
    <span class="p">}</span>
    <span class="nx">stmt</span> <span class="o">:=</span> <span class="s">&#34;INSERT INTO `gamestats`&#34;</span>
    <span class="nx">stmt</span> <span class="o">+=</span> <span class="s">&#34;(player,yards,longest,touchdowns,misc) VALUES (?,?,?,?,?)&#34;</span>
    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">stmt</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Player</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">YardsParsed</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">LongestParsed</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Touchdowns</span><span class="p">,</span> <span class="nx">js</span><span class="p">)</span> 
    <span class="k">return</span> <span class="nx">err</span>
<span class="p">}</span>
</code></pre></div><h4 id="reading-the-values-from-a-json-column">Reading the values from a JSON column</h4>
<p>For reading and parsing the passed data, we&rsquo;ll need to use <code>json.RawMessage</code> type.</p>
<p>File: <code>contract.go</code></p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">FetchStats</span><span class="p">()</span> <span class="p">(</span><span class="nx">Stats</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">stmt</span> <span class="o">:=</span> <span class="s">&#34;SELECT misc from `gamestats` limit 10&#34;</span>
    <span class="kd">var</span> <span class="nx">ss</span> <span class="nx">Stats</span>
    <span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="nx">stmt</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">data</span> <span class="nx">json</span><span class="p">.</span><span class="nx">RawMessage</span> <span class="c1">// for JSON column type
</span><span class="c1"></span>        <span class="kd">var</span> <span class="nx">stat</span> <span class="nx">Stat</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">data</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">stat</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
        <span class="p">}</span>
        <span class="nx">ss</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">ss</span><span class="p">,</span> <span class="nx">stat</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">ss</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p>And that&rsquo;s it!<br>
To see a working version of this app, checkout the full project here: <a href="https://github.com/geekgunda/nfl-rushing">https://github.com/geekgunda/nfl-rushing</a></p>
]]></content>
		</item>
		
	</channel>
</rss>
